package com.aurionpro.project.services;

import com.aurionpro.project.dto.CustomerDto;
import com.aurionpro.project.entities.Customer;
import com.aurionpro.project.exceptions.ValidationException;
import com.aurionpro.project.repositories.CustomerRepository;

import jakarta.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;


@Service
public class CustomerServiceImpl implements CustomerService {

    @Autowired
    private CustomerRepository customerRepository;

    @Override
    public CustomerDto addCustomer(CustomerDto customerDto, HttpSession session) {
        
        validateCustomerDto(customerDto);

        Customer customer = toCustomerMapper(customerDto);

       
        Customer savedCustomer = customerRepository.save(customer);


        return toCustomerDtoMapper(savedCustomer);
    }

    private void validateCustomerDto(CustomerDto customerDto) {
        if (customerDto.getFirstName() == null || customerDto.getFirstName().trim().isEmpty()) {
            throw new ValidationException("First name is mandatory");
        }
        if (customerDto.getLastName() == null || customerDto.getLastName().trim().isEmpty()) {
            throw new ValidationException("Last name is mandatory");
        }
        if (customerDto.getEmail() == null || customerDto.getEmail().trim().isEmpty()) {
            throw new ValidationException("Email is mandatory");
        }
        if (customerDto.getPhone() == null || customerDto.getPhone().trim().isEmpty()) {
            throw new ValidationException("Phone number is mandatory");
        }
        if (customerDto.getAddress() == null || customerDto.getAddress().trim().isEmpty()) {
            throw new ValidationException("Address is mandatory");
        }
        if (customerDto.getPassword() == null || customerDto.getPassword().trim().isEmpty()) {
            throw new ValidationException("Password is mandatory");
        }
    }

    private Customer toCustomerMapper(CustomerDto customerDto) {
        Customer customer = new Customer();
        customer.setFirstName(customerDto.getFirstName());
        customer.setUsername(customerDto.getUsername());
        customer.setLastName(customerDto.getLastName());
        customer.setEmail(customerDto.getEmail());
        customer.setPhone(customerDto.getPhone());
        customer.setAddress(customerDto.getAddress());
        customer.setPassword(customerDto.getPassword());
        return customer;
    }

    private CustomerDto toCustomerDtoMapper(Customer customer) {
        CustomerDto customerDto = new CustomerDto();
        customerDto.setFirstName(customer.getFirstName());
        customerDto.setUsername(customer.getUsername());
        customerDto.setLastName(customer.getLastName());
        customerDto.setEmail(customer.getEmail());
        customerDto.setPhone(customer.getPhone());
        customerDto.setAddress(customer.getAddress());
        customerDto.setPassword(customer.getPassword());
        return customerDto;
    }
    
    @Override
    public List<Customer> getAllCustomers() {
        return customerRepository.findAll();
    }

	
}
